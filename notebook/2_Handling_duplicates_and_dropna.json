{
	"name": "2_Handling_duplicates_and_dropna",
	"properties": {
		"folder": {
			"name": "Handeling Nulls and duplicates"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "910acec8-ea7a-4999-a2e7-e2e7574b7d90"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"sc"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reading parquet file\r\n",
					"\r\n",
					"df = spark.read.format('parquet').load('abfss://refined@projectsynapsestorage.dfs.core.windows.net/ExtNew/E69C5259-86B9-4B9F-85DA-AB181EF11BD0_47_0-1.parquet')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get all columns into a variable\r\n",
					"\r\n",
					"AllColumns = df.schema.names\r\n",
					"\r\n",
					"print(AllColumns)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for column in AllColumns:\r\n",
					"    nullCount = df.filter(df[column].isNull()).count()\r\n",
					"    if(nullCount > 0):\r\n",
					"        print('Null Count in '+ column + ' - ' + str(nullCount))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Group by aggregation\r\n",
					"# To know total employed citizens based on gender\r\n",
					"\r\n",
					"print('To know total employed citizens based on gender')\r\n",
					"df.groupBy('Gender').sum('Employed').show()\r\n",
					"\r\n",
					"#2 Applying multiply aggregtion susing agg()\r\n",
					"\r\n",
					"print('Applying multiply aggregtion susing agg()')\r\n",
					"from pyspark.sql.functions import sum,avg\r\n",
					"df.groupBy('Gender').agg(sum('Employed'), avg('Employed')).show()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Find duplicate row count using group by\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"print('Find duplicate row count using group by')\r\n",
					"\r\n",
					"df.groupBy('Line Number','Year').count().filter(col('count')>1).show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.filter((col('Line Number').isNull() & (col('Year').isNull()))).show()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Using Drop duplicates to handle duplicate rows\r\n",
					"\r\n",
					"print('# Using Drop duplicates to handle duplicate rows')\r\n",
					"\r\n",
					"df_nodups = df.drop_duplicates()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_nodups.groupBy('Line Number','Year').count().filter(col('count')>1).show()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_nodups.filter((col('Line Number').isNull() & (col('Year').isNull()))).show()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Using Dropna \r\n",
					"print('Using Dropna ')\r\n",
					"\r\n",
					"df_all = df_nodups.dropna(how='all')"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_all.filter((col('Line Number').isNull() & (col('Year').isNull()))).show()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for column in AllColumns:\r\n",
					"    nullCount = df_all.filter(df[column].isNull()).count()\r\n",
					"    if(nullCount > 0):\r\n",
					"        print('Null Count in '+ column + ' - ' + str(nullCount))"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Replacing the NUL values with unknown\r\n",
					"\r\n",
					"print('Replacing the NUL values with unknown FOR ALL COLUMNS')\r\n",
					"\r\n",
					"df_clean = df_all.fillna('unknown')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for column in AllColumns:\r\n",
					"    nullCount = df_clean.filter(df_clean[column].isNull()).count()\r\n",
					"    print('Null Count in '+ column + ' - ' + str(nullCount))"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Writing the data to a location \r\n",
					"\r\n",
					"df_clean.write.format('parquet')\\\r\n",
					"             .mode('overwrite')\\\r\n",
					"             .save('abfss://refined@projectsynapsestorage.dfs.core.windows.net/NoNulls/')"
				],
				"execution_count": 18
			}
		]
	}
}